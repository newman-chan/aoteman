<style lang="less">
.card {
    position: absolute;
    top: 126rpx;
    left: 115rpx;
    display: block;
    width: 520rpx;
    height: 771rpx;
    transform: scale(0, 0);
    border-radius: 10rpx;
    overflow: hidden;
}
.btn-ok {
    position: absolute;
    left: 195rpx;
    bottom: 40rpx;
    display: block;
    width: 360rpx;
    height: 98rpx;
    opacity: 0;
    transition: all 0.3s;
    &.look {
        bottom: 100rpx;
    }
    &.active {
        opacity: 1;
    }
}
.ani-lan {
    position: absolute;
    top: 1024rpx;
    left: -1066rpx;
    display: block;
    width: 1066rpx;
    height: 1199rpx;
}
.ani-hong {
    position: absolute;
    top: 1313rpx;
    left: -1102rpx;
    display: block;
    width: 1102rpx;
    height: 733rpx;
}
.ani-bai {
    position: absolute;
    top: 1331rpx;
    left: -825rpx;
    display: block;
    width: 850rpx;
    height: 846rpx;
}
.ani-tip-back {
    position: absolute;
    top: 1568rpx;
    left: -599rpx;
    display: block;
    width: 349rpx;
    height: 372rpx;
    &.active {
        width: 274rpx;
        height: 304rpx;
    }
}
.ani-tip-front {
    position: absolute;
    top: 1280rpx;
    left: -316rpx;
    display: block;
    width: 359rpx;
    height: 382rpx;
    &.active {
        width: 284rpx;
        height: 314rpx;
    }
}
.guang {
    position: absolute;
    top: 126rpx;
    left: 115rpx;
    display: block;
    width: 520rpx;
    height: 771rpx;
    overflow: hidden;
    .ani-guang {
        position: absolute;
        top: -175rpx;
        left: 0rpx;
        display: block;
        width: 520rpx;
        height: 175rpx;
        opacity: 0.5;
    }
}
.card-tip {
    position: absolute;
    top: 50%;
    left: 66rpx;
    display: block;
    margin-top: -167rpx;
    width: 618rpx;
    height: 167rpx;
    opacity: 0;
    //-webkit-filter: blur(10rpx);
}
.hide-card-warp {
    position: absolute;
    left: 0;
    top: 0;
    display: block;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    opacity: 0;
    .hide-card-arrow {
        position: absolute;
        display: block;
        width: 439rpx;
        height: 15rpx;
        &.left {
            top: 50%;
            left: -465rpx;
            margin-top: -40rpx;
        }
        &.right {
            top: 50%;
            left: 750rpx;
            margin-top: -167rpx;
        }
    }
    &.active {
        opacity: 1;
    }

    .hide-card {
        position: absolute;
        top: 126rpx;
        left: 115rpx;
        display: block;
        width: 520rpx;
        height: 771rpx;
        transform-style: preserve-3d;
        backface-visibility: hidden;

        border-radius: 10rpx;
        overflow: hidden;
        opacity: 0;
        transition: all 0.3s;
        &.active {
            opacity: 1;
        }
        .img {
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            width: 100%;
            height: 100%;
            transform-style: preserve-3d;
            backface-visibility: hidden;
            perspective-origin: 50% 50%;
            &.p0 {
                z-index: 10;
                transform: rotateY(0);
            }
            &.p1 {
                transform: rotateY(-90deg);
            }
            image {
                display: block;
                width: 100%;
                height: 100%;
            }
        }
    }
}
</style>  
<template>
    <view class="page">
        <image class="bg" src="../images/bg3.jpg" mode="aspectFill"></image>
        <image class="ani-lan" src="../images/dhpic1.png" animation="{{lanAnimationData}}"></image>
        <image class="card {{showFilter ?'cardFilter':''}}" src="{{imgCard}}" bindload="cardLoadend" binderror="cardLoadErr" animation="{{cardAnimationData}}"></image>
        <view class="guang">
            <image class="ani-guang" src="../images/guang.png" animation="{{guangAnimationData}}"></image>
        </view>
        <image class="ani-hong" src="../images/dhpic2.png" animation="{{hongAnimationData}}"></image>
        <image class="ani-bai" src="../images/dhpic3.png" animation="{{baiAnimationData}}"></image>
        <image class="ani-tip-back {{activation ? 'active':''}}" src="{{activation ? '../images/dhtext1.png' : '../images/successful1.png'}}" animation="{{tipBackAnimationData}}"></image>
        <image class="ani-tip-front {{activation ? 'active':''}}" src="{{activation ? '../images/dhtext.png' : '../images/successful.png'}}" animation="{{tipFrontAnimationData}}"></image>

        <view class="hide-card-warp ani {{showHideCardWarp ?'active':''}}">
            <image class="hide-card-arrow left" animation="{{arrowLeftAnimationData}}" src="../images/hidecard-arrow-l.png"></image>
            <image class="hide-card-arrow right" animation="{{arrowRightAnimationData}}" src="../images/hidecard-arrow-r.png"></image>
            <image class="card-tip" src="../images/showhidecard.png" animation="{{cardTipAnimationData}}"></image>
            <view class="hide-card {{showHideCard ?'active':''}}">
                <view class="img p0" animation="{{hideBackAnimationData}}">
                    <image src="../images/hidecard.png"></image>
                </view>
                <view class="img p1" animation="{{hideFrontAnimationData}}">
                    <image class="{{showHideFilter?'cardFilter':''}}" src="{{hideImgCard}}"></image>
                </view>
            </view>
        </view>
        <image class="btn-ok {{isLook ? 'look' :''}} {{showBtn ? 'active':''}}" src="../images/{{isLook ? 'btn-look':'btn-ok'}}.png" @tap="btnOkClick"></image>
    </view>
    <AuthAlert @childFn.user="authFn"></AuthAlert>
</template>

<script>
import wepy from 'wepy';
import cf from '../config';
import https from '../mixins/Https';
import auth from '../mixins/Auth';
import ut from '../util/Util';
import Tips from '../util/Tips';
import cm from '../util/CardManage';
import AuthAlert from '../components/AuthAlert';

export default class Index extends wepy.page {
    mixins = [https, auth];
    data = {
        imghost: cf.imghost,
        inited: false,
        aniTime: 160,
        cardAnimationData: {},
        lanAnimationData: {},
        hongAnimationData: {},
        baiAnimationData: {},
        tipBackAnimationData: {},
        tipFrontAnimationData: {},
        guangAnimationData: {},
        cardTipAnimationData: {},
        arrowLeftAnimationData: {},
        arrowRightAnimationData: {},
        hideBackAnimationData: {},
        hideFrontAnimationData: {},
        showBtn: false,
        showFilter: false,
        activation: false,
        isLook: false,
        imgCard: '',
        isShowFilter: false,
        showHideCard: false,
        showHideCardWarp: false,
        showHideFilter: false,
        cardCode: '',
        hideImgCard: '',
        book: {
            id: '',
            name: '',
            prize_id: '',
            img_cover: '',
            img_background: '',
            img_border: '',
            audio: '',
            created_at: '',
            updated_at: '',
            card_num: '',
            is_card_flag: 0,
            user_card_num: 0,
            is_reward: 0
        },
        steryCard: null,
        hideCard: {
            id: '',
            book_id: '',
            name: '',
            rarity: {
                origin: '',
                text: ''
            },
            img_big: '',
            img_small: '',
            video: '',
            img_video: '',
            created_at: '',
            updated_at: '',
            code_num: '',
            rank: '',
            auto_card_id: '',
            is_view: 0,
            is_have: 0
        }
    };
    components = {
        AuthAlert: AuthAlert
    };
    methods = {
        cardLoadend () {
            cf.log('开始动画');
            this.cardAni();
        },
        cardLoadErr (e) {
            Tips.toast('卡牌路径不存在');
        },
        btnOkClick () {
            if (this.showBtn) {
                ut.goPage('index', { cardId: this.hideCard.book_id }, 2);
            }
        },
        authFn (__res, __code, __callback) {
            this.$parent.globalData.userInfo = __res.detail.userInfo;
            this.userLogin(__code, __callback);
        }
    };
    authAlertShow (__code, __callback) {
        this.$invoke('AuthAlert', 'alertShow', __code, __callback);
    }
    onShareAppMessage (options) { }
    onLoad (_opt) {
        cf.log(_opt);
        let _obj = {};
        if (_opt.q) {
            let _q = decodeURIComponent(decodeURIComponent(_opt.q));
            let _qAr = _q.split('?');
            if (_qAr.length > 1) {
                let _params = _qAr[1].split('&');
                for (let i = 0; i < _params.length; i++) {
                    var _fields = _params[i].split('=');
                    if (_fields.length > 1) {
                        _obj[_fields[0]] = _fields[1];
                    }
                }
                cf.log(_obj);
            }
            this.cardCode = _obj.code || '';
        }
    }
    async onShow () {
        let _login = await this.isLogin();
        let _cardAr = ['ba6107e06270fda104f6cbbd1da81334'];
        let _testId = _cardAr[Math.floor(Math.random() * _cardAr.length)];
        cf.log('测试卡ID' + _testId);
        cf.log('卡ID' + this.cardCode);
        if (_login.code == 0) {
            this.wxRequest(
                'card/bind',
                res => {
                    if (res.code == 0) {
                        this.isShowFilter = cm.showFilter(res.data.entity.card);
                        this.imgCard = cf.imghost + res.data.entity.card.img_big;
                        this.book = res.data.entity.book;
                        this.hideCard = res.data.entity.card;
                        this.steryCard = res.data.entity.steryCard || null;
                        this.activation = res.data.entity.hint == 1 ? false : true;
                        this.isLook = false;
                        this.$apply();
                    } else if (res.code == 3002) {
                        this.isLook = true;
                        this.isShowFilter = cm.showFilter(res.data.request.card);
                        this.imgCard = cf.imghost + res.data.request.card.img_big;
                        this.book = res.data.request.book;
                        this.hideCard = res.data.request.card;
                        this.steryCard = null;
                        this.$apply();
                    } else {
                        Tips.toast(res.msg);
                    }
                },
                {
                    card_code: this.cardCode
                        ? this.cardCode
                        : ''
                },
                1,
                1
            );
        } else {
            Tips.toast(_login.msg);
        }
    }
    cardAni () {
        let _animation = wx.createAnimation({
            transformOrigin: '50% 50%',
            timingFunction: 'linear',
            duration: 500
        });
        _animation.scale(1.1, 1.1).step();
        _animation.scale(1, 1).step({ duration: 200 });
        this.cardAnimationData = _animation.export();

        setTimeout(() => {
            this.guangAni();
            this.lanAni();
        }, 700);
    }
    guangAni () {
        let _animation = wx.createAnimation({
            duration: 1000
        });
        _animation.top('771rpx').step();

        this.guangAnimationData = _animation.export();
        this.$apply();
        setTimeout(res => {
            this.showFilter = this.isShowFilter;
            this.$apply();
        }, 1000);
    }

    lanAni () {
        let _animation = wx.createAnimation({
            duration: this.aniTime
        });
        _animation
            .left('-233rpx')
            .top('264rpx')
            .step();

        this.lanAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            this.hongAni();
        }, this.aniTime);
    }
    hongAni () {
        let _animation = wx.createAnimation({
            duration: this.aniTime
        });
        _animation
            .left('-473rpx')
            .top('710rpx')
            .step();

        this.hongAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            this.baiAni();
        }, this.aniTime);
    }
    baiAni () {
        let _animation = wx.createAnimation({
            duration: this.aniTime
        });
        _animation
            .left('-247rpx')
            .top('755rpx')
            .step();

        this.baiAnimationData = _animation.export();
        this.$apply();
        setTimeout(res => {
            if (this.isLook) {
                this.btnShow();
            } else {
                this.tipBackAni();
                this.tipFrontAni();
            }
        }, this.isLook ? 2000 : this.aniTime);
    }
    tipBackAni () {
        let _animation = wx.createAnimation({
            duration: this.aniTime
        });
        _animation
            .left('128rpx')
            .top(this.activation ? '872rpx' : '780rpx')
            .step();
        _animation
            .left('226rpx')
            .top(this.activation ? '730rpx' : '680rpx')
            .step({ duration: 1875 });
        this.tipBackAnimationData = _animation.export();
        this.$apply();
    }
    tipFrontAni () {
        let _animation = wx.createAnimation({
            duration: this.aniTime
        });
        _animation
            .left('157rpx')
            .top(this.activation ? '810rpx' : '718rpx')
            .step();
        _animation
            .left('226rpx')
            .top(this.activation ? '698rpx' : '646rpx')
            .step({ duration: 1875 });
        this.tipFrontAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            if (this.steryCard) {
                this.hideImgCard = this.imghost + this.steryCard.img_big;
                this.showHideCardWarp = true;
                this.$apply();
                setTimeout(() => {
                    this.arrowLeftAni();
                    this.arrowRightAni();
                    this.hideTipAni();
                }, 300);
                cf.log('隐藏卡激活');
            } else {
                this.btnShow();
            }
        }, this.showFilter ? this.$parent.globalData.cardFilterTime + 1875 : 1875);
    }
    arrowLeftAni () {
        let _animation = wx.createAnimation({
            duration: this.aniTime
        });
        _animation.left('156rpx').step();
        this.arrowLeftAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            _animation.left('750rpx').step();
            this.arrowLeftAnimationData = _animation.export();
            this.$apply();
        }, this.aniTime);
    }
    arrowRightAni () {
        let _animation = wx.createAnimation({
            duration: this.aniTime
        });
        _animation.left('156rpx').step();
        this.arrowRightAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            _animation.left('-440rpx').step();
            this.arrowRightAnimationData = _animation.export();
            this.$apply();
        }, this.aniTime);
    }
    hideTipAni () {
        let _animation = wx.createAnimation({
            duration: 500
        });
        _animation.opacity(1).step();
        this.cardTipAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            _animation
                .opacity(0)
                .scale(10, 10)
                .step();
            this.cardTipAnimationData = _animation.export();
            this.$apply();
            setTimeout(() => {
                this.hideCardAni();
            }, 200);
        }, 600);
    }
    hideCardAni () {
        this.showHideCard = true;
        this.$apply();
        setTimeout(() => {
            this.hideBackAni();
        }, 300);
    }
    hideBackAni () {
        let _animation = wx.createAnimation({
            duration: 500
        });
        _animation.rotateY(-90).step();
        this.hideBackAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            this.hideFrontAni();
        }, 500);
    }
    hideFrontAni () {
        let _animation = wx.createAnimation({
            duration: 500
        });
        _animation.rotateY(0).step();
        this.hideFrontAnimationData = _animation.export();
        this.$apply();
        setTimeout(() => {
            this.showHideFilter = cm.showFilter(this.steryCard);

            this.$apply();
            setTimeout(() => {
                this.btnShow();
            }, this.$parent.globalData.cardFilterTime);
        }, 500);
    }
    btnShow () {
        this.showBtn = true;
        this.$apply();
    }
}
</script>
