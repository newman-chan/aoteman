'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var goPage = function goPage(page, param, ptype) {
    var strParam = "";
    for (var o in param || {}) {
        strParam += o + '=' + param[o] + '&';
    }
    strParam = strParam.length > 0 ? '?' + strParam.substring(0, strParam.length - 1) : "";
    page = page + strParam;
    switch (ptype) {
        case 1:
            wx.switchTab({
                url: page
            });
            break;
        case 2:
            wx.redirectTo({
                url: page
            });
            break;
        case 3:
            wx.reLaunch({
                url: page
            });
            break;
        default:
            wx.navigateTo({
                url: page
            });
            break;
    }
};
var goPageBack = function goPageBack(step) {
    step = step || 1;
    wx.navigateBack({
        delta: step
    });
};
var setStorageSync = function setStorageSync(key, value) {
    if (key) {
        wx.setStorageSync(key, value ? JSON.stringify(value) : '');
    }
};
var getStorageSync = function getStorageSync(key, vType) {
    var value = wx.getStorageSync(key);
    if (value) {
        value = JSON.parse(value);
    } else if (vType == 1) {
        value = [];
    }
    return value;
};
var strTrim = function strTrim(str) {
    str = str ? str + "" : "";
    if (str) {
        return str.replace(/\s+/g, "");
    } else {
        return "";
    }
};
var checkMobile = function checkMobile(num) {
    num = num + '';
    if (num.length == 0) {
        return false;
    }
    if (num.length != 11) {
        return false;
    }

    var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
    if (!myreg.test(num)) {
        return false;
    }
    return true;
};
var formatNumber = function formatNumber(n) {
    n = n.toString();
    return n[1] ? n : '0' + n;
};
var formatTime = function formatTime(date, split, timetype) {
    var time = "";
    if (!date) return time;
    date = new Date(date);
    split = split || '-';
    timetype = timetype || 0;
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();

    switch (timetype) {
        case 0:
            time = [year, month, day].map(formatNumber).join(split) + ' ' + [hour, minute, second].map(formatNumber).join(':');
            break;
        case 1:
            time = [year, month, day].map(formatNumber).join(split);
            break;
        case 2:
            time = [hour, minute, second].map(formatNumber).join(':');
            break;
    }
    return time;
};
exports.default = {
    goPage: goPage,
    goPageBack: goPageBack,
    setStorageSync: setStorageSync,
    getStorageSync: getStorageSync,
    strTrim: strTrim,
    checkMobile: checkMobile,
    formatTime: formatTime
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,